// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: transfer/v1/upload.proto

package transferv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TransferService_CreateUpload_FullMethodName = "/transfer.v1.TransferService/CreateUpload"
	TransferService_SyncUpload_FullMethodName   = "/transfer.v1.TransferService/SyncUpload"
	TransferService_UploadBlock_FullMethodName  = "/transfer.v1.TransferService/UploadBlock"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	// CreateUpload is called to create a new upload.
	CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error)
	// SyncUpload is used when we want to resume an upload and we need to know
	// what the current offset on the server side is.  If the server has restarted or
	// the upload has somehow gotten itself deleted, the code field will indicate this.
	SyncUpload(ctx context.Context, in *SyncUploadRequest, opts ...grpc.CallOption) (*SyncUploadResponse, error)
	// UploadBlock
	UploadBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlockRequest, UploadBlockResponse], error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) CreateUpload(ctx context.Context, in *CreateUploadRequest, opts ...grpc.CallOption) (*CreateUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateUploadResponse)
	err := c.cc.Invoke(ctx, TransferService_CreateUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) SyncUpload(ctx context.Context, in *SyncUploadRequest, opts ...grpc.CallOption) (*SyncUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncUploadResponse)
	err := c.cc.Invoke(ctx, TransferService_SyncUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) UploadBlock(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadBlockRequest, UploadBlockResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TransferService_ServiceDesc.Streams[0], TransferService_UploadBlock_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadBlockRequest, UploadBlockResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_UploadBlockClient = grpc.ClientStreamingClient[UploadBlockRequest, UploadBlockResponse]

// TransferServiceServer is the server API for TransferService service.
// All implementations should embed UnimplementedTransferServiceServer
// for forward compatibility.
type TransferServiceServer interface {
	// CreateUpload is called to create a new upload.
	CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error)
	// SyncUpload is used when we want to resume an upload and we need to know
	// what the current offset on the server side is.  If the server has restarted or
	// the upload has somehow gotten itself deleted, the code field will indicate this.
	SyncUpload(context.Context, *SyncUploadRequest) (*SyncUploadResponse, error)
	// UploadBlock
	UploadBlock(grpc.ClientStreamingServer[UploadBlockRequest, UploadBlockResponse]) error
}

// UnimplementedTransferServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTransferServiceServer struct{}

func (UnimplementedTransferServiceServer) CreateUpload(context.Context, *CreateUploadRequest) (*CreateUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUpload not implemented")
}
func (UnimplementedTransferServiceServer) SyncUpload(context.Context, *SyncUploadRequest) (*SyncUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUpload not implemented")
}
func (UnimplementedTransferServiceServer) UploadBlock(grpc.ClientStreamingServer[UploadBlockRequest, UploadBlockResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadBlock not implemented")
}
func (UnimplementedTransferServiceServer) testEmbeddedByValue() {}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	// If the following call pancis, it indicates UnimplementedTransferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_CreateUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).CreateUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_CreateUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).CreateUpload(ctx, req.(*CreateUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_SyncUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).SyncUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_SyncUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).SyncUpload(ctx, req.(*SyncUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_UploadBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransferServiceServer).UploadBlock(&grpc.GenericServerStream[UploadBlockRequest, UploadBlockResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TransferService_UploadBlockServer = grpc.ClientStreamingServer[UploadBlockRequest, UploadBlockResponse]

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transfer.v1.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUpload",
			Handler:    _TransferService_CreateUpload_Handler,
		},
		{
			MethodName: "SyncUpload",
			Handler:    _TransferService_SyncUpload_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadBlock",
			Handler:       _TransferService_UploadBlock_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "transfer/v1/upload.proto",
}
